name: packwiz

on: push

jobs:
  info:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.info.outputs.name }}
      version: ${{ steps.info.outputs.version }}
      minecraft: ${{ steps.info.outputs.minecraft }}
      sha: ${{ steps.info.outputs.sha }}
      package: ${{ steps.info.outputs.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: robinraju/release-downloader@v1.8
        with:
          repository: snyball/tombl
          fileName: '*.tar.gz'
          latest: true
      - name: Install tombl
        run: |
          mkdir bin
          tar -zxvf tombl-*.tar.gz -C bin/
          readonly tombl=$(find bin/ -type f -executable -print -quit)
          echo "$(dirname $tombl)" >> $GITHUB_PATH
      - name: Get info
        id: info
        run: |
          eval "$(tombl -e name=name pack.toml)"
          echo "name=$name" >> $GITHUB_OUTPUT
          eval "$(tombl -e version=version pack.toml)"
          echo "version=$version" >> $GITHUB_OUTPUT
          eval "$(tombl -e minecraft=versions.minecraft pack.toml)"
          echo "minecraft=$minecraft" >> $GITHUB_OUTPUT
          sha=`echo $GITHUB_SHA | cut -c 1-7`
          echo "sha=$sha" >> $GITHUB_OUTPUT
          package=${name}-${version}-rev.${sha}
          echo "package=$package" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs: [info]
    env:
      version: ${{ needs.info.outputs.version }}
      sha: ${{ needs.info.outputs.sha }}
    outputs:
      package: ${{ steps.prepare.outputs.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.0'
          check-latest: true
      - name: Cache Go modules
        uses: actions/cache@v3
        id: cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build
      - name: Download Packwiz
        if: steps.cache.outputs.cache-hit != 'true'
        run: go install github.com/packwiz/packwiz@latest
      - name: Prepare environment
        run: |
          touch index.toml
          packwiz refresh

          [ -d .output ] && rm -r .output
          [ -d .temp ] && rm -r .temp
          mkdir -p .output && mkdir -p .temp
      - name: Prepare files
        run: |
          readonly files=(
            ./config/custom-hud/profile1.txt
            ./config/custom-hud/profile2.txt
            ./config/isxander-main-menu-credits.json
          )
          for file in "${files[@]}"; do
            [[ ! -a "${file}" ]] && continue
            echo "Replacing placeholders in ${file} file to data from environment"
            eval "echo \"$(cat ${file} | sed -E 's/(["])/\\\1/g')\" > ${file}" 2> /dev/null
          done
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Download Packwiz Installer
        run: |
          wget https://github.com/packwiz/packwiz-installer-bootstrap/releases/download/v0.0.3/packwiz-installer-bootstrap.jar \
           -O .temp/packwiz-installer-bootstrap.jar
      - name: Export Modpack
        run: |
          packwiz modrinth export -o .output/${{ needs.info.outputs.package }}.mrpack

          pack=file://`realpath pack.toml`
          cd .temp && java -jar packwiz-installer-bootstrap.jar -g $pack
          zip -r ../.output/${{ needs.info.outputs.package }}.zip . \
            -x 'packwiz-installer-bootstrap.jar' \
            -x 'packwiz-installer.jar' \
            -x 'packwiz.json'
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: modpacks
          path: .output/

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [info, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download modpack
        uses: actions/download-artifact@v2
        with:
          name: modpacks
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          name: ${{ needs.info.outputs.name }} ${{ needs.info.outputs.version }} for ${{ needs.info.outputs.package }}
          body_path: CHANGELOG.md
          files: |
            ${{ needs.info.outputs.package }}.zip
            ${{ needs.info.outputs.package }}.mrpack
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
