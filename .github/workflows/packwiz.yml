name: packwiz

on: push

jobs:
  info:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.info.outputs.name }}
      version: ${{ steps.info.outputs.version }}
      sha: ${{ steps.info.outputs.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.0'
      - name: Prepare environment
        run: GO111MODULE=on go install github.com/freshautomations/stoml@latest
      - name: Get info
        id: info
        run: |
            name=`stoml pack.toml name`
            echo "::set-output name=name::$name"
            version=`stoml pack.toml version`
            echo "::set-output name=version::$version"
            sha=`echo $GITHUB_SHA | cut -c 1-7`
            echo "::set-output name=sha::$sha"
  build:
    runs-on: ubuntu-latest
    needs: [info]
    outputs:
      package: ${{ steps.prepare.outputs.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.0'
      - name: Download Packwiz
        run: go install github.com/packwiz/packwiz@latest
      - name: Prepare environment
        id: prepare
        run: |
          touch index.toml
          packwiz refresh

          [ -d .output ] && rm -r .output
          mkdir -p .output

          package=${{ needs.info.outputs.name }}-${{ needs.info.outputs.version }}-rev.${{ needs.info.outputs.sha }}
          echo "::set-output name=package::$package"
      - name: Export Modpack
        run: |
          zip -r .output/${{ steps.prepare.outputs.package }}.zip . -x@.packwizignore
          packwiz curseforge export -o .output/${{ steps.prepare.outputs.package }}.curseforge.zip
          packwiz modrinth export -o .output/${{ steps.prepare.outputs.package }}.mrpack
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Modpack
          path: .output/

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build]
    steps:
      - name: Download modpack
        uses: actions/download-artifact@v2
        with:
          name: Modpack
      - name: Generate changelog
        id: changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          output: CHANGELOG.md
          stripGeneratorNotice: true
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          files: |
            .output/${{ needs.build.outputs.package }}.zip
            .output/${{ needs.build.outputs.package }}.curseforge.zip
            .output/${{ needs.build.outputs.package }}.mrpack
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
